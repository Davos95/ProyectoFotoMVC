#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProyectoFotoMVC.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="pictureManager")]
	public partial class contextPicturesManegerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertWORK(WORK instance);
    partial void UpdateWORK(WORK instance);
    partial void DeleteWORK(WORK instance);
    partial void InsertWORKER(WORKER instance);
    partial void UpdateWORKER(WORKER instance);
    partial void DeleteWORKER(WORKER instance);
    partial void InsertSESION(SESION instance);
    partial void UpdateSESION(SESION instance);
    partial void DeleteSESION(SESION instance);
    partial void InsertSESION_WORKER(SESION_WORKER instance);
    partial void UpdateSESION_WORKER(SESION_WORKER instance);
    partial void DeleteSESION_WORKER(SESION_WORKER instance);
    partial void InsertPHOTO(PHOTO instance);
    partial void UpdatePHOTO(PHOTO instance);
    partial void DeletePHOTO(PHOTO instance);
    partial void InsertCOMISION(COMISION instance);
    partial void UpdateCOMISION(COMISION instance);
    partial void DeleteCOMISION(COMISION instance);
    #endregion
		
		public contextPicturesManegerDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["cadenaConexion"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public contextPicturesManegerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public contextPicturesManegerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public contextPicturesManegerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public contextPicturesManegerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<WORK> WORKs
		{
			get
			{
				return this.GetTable<WORK>();
			}
		}
		
		public System.Data.Linq.Table<WORKER> WORKERs
		{
			get
			{
				return this.GetTable<WORKER>();
			}
		}
		
		public System.Data.Linq.Table<SESION> SESIONs
		{
			get
			{
				return this.GetTable<SESION>();
			}
		}
		
		public System.Data.Linq.Table<SESION_WORKER> SESION_WORKERs
		{
			get
			{
				return this.GetTable<SESION_WORKER>();
			}
		}
		
		public System.Data.Linq.Table<PHOTO> PHOTOs
		{
			get
			{
				return this.GetTable<PHOTO>();
			}
		}
		
		public System.Data.Linq.Table<COMISION> COMISIONs
		{
			get
			{
				return this.GetTable<COMISION>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[WORK]")]
	public partial class WORK : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private EntitySet<SESION_WORKER> _SESION_WORKERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    #endregion
		
		public WORK()
		{
			this._SESION_WORKERs = new EntitySet<SESION_WORKER>(new Action<SESION_WORKER>(this.attach_SESION_WORKERs), new Action<SESION_WORKER>(this.detach_SESION_WORKERs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(100)")]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WORK_SESION_WORKER", Storage="_SESION_WORKERs", ThisKey="ID", OtherKey="IDWORK")]
		public EntitySet<SESION_WORKER> SESION_WORKERs
		{
			get
			{
				return this._SESION_WORKERs;
			}
			set
			{
				this._SESION_WORKERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SESION_WORKERs(SESION_WORKER entity)
		{
			this.SendPropertyChanging();
			entity.WORK = this;
		}
		
		private void detach_SESION_WORKERs(SESION_WORKER entity)
		{
			this.SendPropertyChanging();
			entity.WORK = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WORKER")]
	public partial class WORKER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private string _CONTACT;
		
		private string _URLCONTACT;
		
		private EntitySet<SESION_WORKER> _SESION_WORKERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnCONTACTChanging(string value);
    partial void OnCONTACTChanged();
    partial void OnURLCONTACTChanging(string value);
    partial void OnURLCONTACTChanged();
    #endregion
		
		public WORKER()
		{
			this._SESION_WORKERs = new EntitySet<SESION_WORKER>(new Action<SESION_WORKER>(this.attach_SESION_WORKERs), new Action<SESION_WORKER>(this.detach_SESION_WORKERs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(30)")]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CONTACT", DbType="NVarChar(30)")]
		public string CONTACT
		{
			get
			{
				return this._CONTACT;
			}
			set
			{
				if ((this._CONTACT != value))
				{
					this.OnCONTACTChanging(value);
					this.SendPropertyChanging();
					this._CONTACT = value;
					this.SendPropertyChanged("CONTACT");
					this.OnCONTACTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URLCONTACT", DbType="NVarChar(255)")]
		public string URLCONTACT
		{
			get
			{
				return this._URLCONTACT;
			}
			set
			{
				if ((this._URLCONTACT != value))
				{
					this.OnURLCONTACTChanging(value);
					this.SendPropertyChanging();
					this._URLCONTACT = value;
					this.SendPropertyChanged("URLCONTACT");
					this.OnURLCONTACTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WORKER_SESION_WORKER", Storage="_SESION_WORKERs", ThisKey="ID", OtherKey="IDWORKER")]
		public EntitySet<SESION_WORKER> SESION_WORKERs
		{
			get
			{
				return this._SESION_WORKERs;
			}
			set
			{
				this._SESION_WORKERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SESION_WORKERs(SESION_WORKER entity)
		{
			this.SendPropertyChanging();
			entity.WORKER = this;
		}
		
		private void detach_SESION_WORKERs(SESION_WORKER entity)
		{
			this.SendPropertyChanging();
			entity.WORKER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SESION")]
	public partial class SESION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private string _DESCRIPTION;
		
		private System.Nullable<int> _IDPHOTO;
		
		private System.Nullable<System.DateTime> _DATESESION;
		
		private System.Nullable<int> _IDCOMISION;
		
		private EntitySet<SESION_WORKER> _SESION_WORKERs;
		
		private EntitySet<PHOTO> _PHOTOs;
		
		private EntityRef<PHOTO> _PHOTO;
		
		private EntityRef<COMISION> _COMISION;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnDESCRIPTIONChanging(string value);
    partial void OnDESCRIPTIONChanged();
    partial void OnIDPHOTOChanging(System.Nullable<int> value);
    partial void OnIDPHOTOChanged();
    partial void OnDATESESIONChanging(System.Nullable<System.DateTime> value);
    partial void OnDATESESIONChanged();
    partial void OnIDCOMISIONChanging(System.Nullable<int> value);
    partial void OnIDCOMISIONChanged();
    #endregion
		
		public SESION()
		{
			this._SESION_WORKERs = new EntitySet<SESION_WORKER>(new Action<SESION_WORKER>(this.attach_SESION_WORKERs), new Action<SESION_WORKER>(this.detach_SESION_WORKERs));
			this._PHOTOs = new EntitySet<PHOTO>(new Action<PHOTO>(this.attach_PHOTOs), new Action<PHOTO>(this.detach_PHOTOs));
			this._PHOTO = default(EntityRef<PHOTO>);
			this._COMISION = default(EntityRef<COMISION>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(250)")]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DESCRIPTION", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string DESCRIPTION
		{
			get
			{
				return this._DESCRIPTION;
			}
			set
			{
				if ((this._DESCRIPTION != value))
				{
					this.OnDESCRIPTIONChanging(value);
					this.SendPropertyChanging();
					this._DESCRIPTION = value;
					this.SendPropertyChanged("DESCRIPTION");
					this.OnDESCRIPTIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPHOTO", DbType="Int")]
		public System.Nullable<int> IDPHOTO
		{
			get
			{
				return this._IDPHOTO;
			}
			set
			{
				if ((this._IDPHOTO != value))
				{
					if (this._PHOTO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPHOTOChanging(value);
					this.SendPropertyChanging();
					this._IDPHOTO = value;
					this.SendPropertyChanged("IDPHOTO");
					this.OnIDPHOTOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATESESION", DbType="Date")]
		public System.Nullable<System.DateTime> DATESESION
		{
			get
			{
				return this._DATESESION;
			}
			set
			{
				if ((this._DATESESION != value))
				{
					this.OnDATESESIONChanging(value);
					this.SendPropertyChanging();
					this._DATESESION = value;
					this.SendPropertyChanged("DATESESION");
					this.OnDATESESIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCOMISION", DbType="Int")]
		public System.Nullable<int> IDCOMISION
		{
			get
			{
				return this._IDCOMISION;
			}
			set
			{
				if ((this._IDCOMISION != value))
				{
					if (this._COMISION.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCOMISIONChanging(value);
					this.SendPropertyChanging();
					this._IDCOMISION = value;
					this.SendPropertyChanged("IDCOMISION");
					this.OnIDCOMISIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SESION_SESION_WORKER", Storage="_SESION_WORKERs", ThisKey="ID", OtherKey="IDSESION")]
		public EntitySet<SESION_WORKER> SESION_WORKERs
		{
			get
			{
				return this._SESION_WORKERs;
			}
			set
			{
				this._SESION_WORKERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SESION_PHOTO", Storage="_PHOTOs", ThisKey="ID", OtherKey="IDSESION")]
		public EntitySet<PHOTO> PHOTOs
		{
			get
			{
				return this._PHOTOs;
			}
			set
			{
				this._PHOTOs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PHOTO_SESION", Storage="_PHOTO", ThisKey="IDPHOTO", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public PHOTO PHOTO
		{
			get
			{
				return this._PHOTO.Entity;
			}
			set
			{
				PHOTO previousValue = this._PHOTO.Entity;
				if (((previousValue != value) 
							|| (this._PHOTO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PHOTO.Entity = null;
						previousValue.SESIONs.Remove(this);
					}
					this._PHOTO.Entity = value;
					if ((value != null))
					{
						value.SESIONs.Add(this);
						this._IDPHOTO = value.ID;
					}
					else
					{
						this._IDPHOTO = default(Nullable<int>);
					}
					this.SendPropertyChanged("PHOTO");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="COMISION_SESION", Storage="_COMISION", ThisKey="IDCOMISION", OtherKey="ID", IsForeignKey=true)]
		public COMISION COMISION
		{
			get
			{
				return this._COMISION.Entity;
			}
			set
			{
				COMISION previousValue = this._COMISION.Entity;
				if (((previousValue != value) 
							|| (this._COMISION.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._COMISION.Entity = null;
						previousValue.SESIONs.Remove(this);
					}
					this._COMISION.Entity = value;
					if ((value != null))
					{
						value.SESIONs.Add(this);
						this._IDCOMISION = value.ID;
					}
					else
					{
						this._IDCOMISION = default(Nullable<int>);
					}
					this.SendPropertyChanged("COMISION");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SESION_WORKERs(SESION_WORKER entity)
		{
			this.SendPropertyChanging();
			entity.SESION = this;
		}
		
		private void detach_SESION_WORKERs(SESION_WORKER entity)
		{
			this.SendPropertyChanging();
			entity.SESION = null;
		}
		
		private void attach_PHOTOs(PHOTO entity)
		{
			this.SendPropertyChanging();
			entity.SESION = this;
		}
		
		private void detach_PHOTOs(PHOTO entity)
		{
			this.SendPropertyChanging();
			entity.SESION = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SESION_WORKER")]
	public partial class SESION_WORKER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDSESION;
		
		private int _IDWORKER;
		
		private System.Nullable<int> _IDWORK;
		
		private EntityRef<SESION> _SESION;
		
		private EntityRef<WORKER> _WORKER;
		
		private EntityRef<WORK> _WORK;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDSESIONChanging(int value);
    partial void OnIDSESIONChanged();
    partial void OnIDWORKERChanging(int value);
    partial void OnIDWORKERChanged();
    partial void OnIDWORKChanging(System.Nullable<int> value);
    partial void OnIDWORKChanged();
    #endregion
		
		public SESION_WORKER()
		{
			this._SESION = default(EntityRef<SESION>);
			this._WORKER = default(EntityRef<WORKER>);
			this._WORK = default(EntityRef<WORK>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSESION", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDSESION
		{
			get
			{
				return this._IDSESION;
			}
			set
			{
				if ((this._IDSESION != value))
				{
					if (this._SESION.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSESIONChanging(value);
					this.SendPropertyChanging();
					this._IDSESION = value;
					this.SendPropertyChanged("IDSESION");
					this.OnIDSESIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDWORKER", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDWORKER
		{
			get
			{
				return this._IDWORKER;
			}
			set
			{
				if ((this._IDWORKER != value))
				{
					if (this._WORKER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDWORKERChanging(value);
					this.SendPropertyChanging();
					this._IDWORKER = value;
					this.SendPropertyChanged("IDWORKER");
					this.OnIDWORKERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDWORK", DbType="Int")]
		public System.Nullable<int> IDWORK
		{
			get
			{
				return this._IDWORK;
			}
			set
			{
				if ((this._IDWORK != value))
				{
					if (this._WORK.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDWORKChanging(value);
					this.SendPropertyChanging();
					this._IDWORK = value;
					this.SendPropertyChanged("IDWORK");
					this.OnIDWORKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SESION_SESION_WORKER", Storage="_SESION", ThisKey="IDSESION", OtherKey="ID", IsForeignKey=true)]
		public SESION SESION
		{
			get
			{
				return this._SESION.Entity;
			}
			set
			{
				SESION previousValue = this._SESION.Entity;
				if (((previousValue != value) 
							|| (this._SESION.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SESION.Entity = null;
						previousValue.SESION_WORKERs.Remove(this);
					}
					this._SESION.Entity = value;
					if ((value != null))
					{
						value.SESION_WORKERs.Add(this);
						this._IDSESION = value.ID;
					}
					else
					{
						this._IDSESION = default(int);
					}
					this.SendPropertyChanged("SESION");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WORKER_SESION_WORKER", Storage="_WORKER", ThisKey="IDWORKER", OtherKey="ID", IsForeignKey=true)]
		public WORKER WORKER
		{
			get
			{
				return this._WORKER.Entity;
			}
			set
			{
				WORKER previousValue = this._WORKER.Entity;
				if (((previousValue != value) 
							|| (this._WORKER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WORKER.Entity = null;
						previousValue.SESION_WORKERs.Remove(this);
					}
					this._WORKER.Entity = value;
					if ((value != null))
					{
						value.SESION_WORKERs.Add(this);
						this._IDWORKER = value.ID;
					}
					else
					{
						this._IDWORKER = default(int);
					}
					this.SendPropertyChanged("WORKER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WORK_SESION_WORKER", Storage="_WORK", ThisKey="IDWORK", OtherKey="ID", IsForeignKey=true)]
		public WORK WORK
		{
			get
			{
				return this._WORK.Entity;
			}
			set
			{
				WORK previousValue = this._WORK.Entity;
				if (((previousValue != value) 
							|| (this._WORK.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WORK.Entity = null;
						previousValue.SESION_WORKERs.Remove(this);
					}
					this._WORK.Entity = value;
					if ((value != null))
					{
						value.SESION_WORKERs.Add(this);
						this._IDWORK = value.ID;
					}
					else
					{
						this._IDWORK = default(Nullable<int>);
					}
					this.SendPropertyChanged("WORK");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PHOTO")]
	public partial class PHOTO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private System.Data.Linq.Binary _PICTURE;
		
		private System.Nullable<int> _IDSESION;
		
		private System.Nullable<int> _ORDERPHOTO;
		
		private EntitySet<SESION> _SESIONs;
		
		private EntityRef<SESION> _SESION;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnPICTUREChanging(System.Data.Linq.Binary value);
    partial void OnPICTUREChanged();
    partial void OnIDSESIONChanging(System.Nullable<int> value);
    partial void OnIDSESIONChanged();
    partial void OnORDERPHOTOChanging(System.Nullable<int> value);
    partial void OnORDERPHOTOChanged();
    #endregion
		
		public PHOTO()
		{
			this._SESIONs = new EntitySet<SESION>(new Action<SESION>(this.attach_SESIONs), new Action<SESION>(this.detach_SESIONs));
			this._SESION = default(EntityRef<SESION>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(25)")]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PICTURE", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PICTURE
		{
			get
			{
				return this._PICTURE;
			}
			set
			{
				if ((this._PICTURE != value))
				{
					this.OnPICTUREChanging(value);
					this.SendPropertyChanging();
					this._PICTURE = value;
					this.SendPropertyChanged("PICTURE");
					this.OnPICTUREChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSESION", DbType="Int")]
		public System.Nullable<int> IDSESION
		{
			get
			{
				return this._IDSESION;
			}
			set
			{
				if ((this._IDSESION != value))
				{
					if (this._SESION.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSESIONChanging(value);
					this.SendPropertyChanging();
					this._IDSESION = value;
					this.SendPropertyChanged("IDSESION");
					this.OnIDSESIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ORDERPHOTO", DbType="Int")]
		public System.Nullable<int> ORDERPHOTO
		{
			get
			{
				return this._ORDERPHOTO;
			}
			set
			{
				if ((this._ORDERPHOTO != value))
				{
					this.OnORDERPHOTOChanging(value);
					this.SendPropertyChanging();
					this._ORDERPHOTO = value;
					this.SendPropertyChanged("ORDERPHOTO");
					this.OnORDERPHOTOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PHOTO_SESION", Storage="_SESIONs", ThisKey="ID", OtherKey="IDPHOTO")]
		public EntitySet<SESION> SESIONs
		{
			get
			{
				return this._SESIONs;
			}
			set
			{
				this._SESIONs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SESION_PHOTO", Storage="_SESION", ThisKey="IDSESION", OtherKey="ID", IsForeignKey=true)]
		public SESION SESION
		{
			get
			{
				return this._SESION.Entity;
			}
			set
			{
				SESION previousValue = this._SESION.Entity;
				if (((previousValue != value) 
							|| (this._SESION.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SESION.Entity = null;
						previousValue.PHOTOs.Remove(this);
					}
					this._SESION.Entity = value;
					if ((value != null))
					{
						value.PHOTOs.Add(this);
						this._IDSESION = value.ID;
					}
					else
					{
						this._IDSESION = default(Nullable<int>);
					}
					this.SendPropertyChanged("SESION");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SESIONs(SESION entity)
		{
			this.SendPropertyChanging();
			entity.PHOTO = this;
		}
		
		private void detach_SESIONs(SESION entity)
		{
			this.SendPropertyChanging();
			entity.PHOTO = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.COMISION")]
	public partial class COMISION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _NAME;
		
		private System.Data.Linq.Binary _PHOTO;
		
		private string _DESCRIPTION;
		
		private System.Nullable<int> _ORDERCOMISION;
		
		private System.Nullable<double> _PRICE;
		
		private EntitySet<SESION> _SESIONs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnPHOTOChanging(System.Data.Linq.Binary value);
    partial void OnPHOTOChanged();
    partial void OnDESCRIPTIONChanging(string value);
    partial void OnDESCRIPTIONChanged();
    partial void OnORDERCOMISIONChanging(System.Nullable<int> value);
    partial void OnORDERCOMISIONChanged();
    partial void OnPRICEChanging(System.Nullable<double> value);
    partial void OnPRICEChanged();
    #endregion
		
		public COMISION()
		{
			this._SESIONs = new EntitySet<SESION>(new Action<SESION>(this.attach_SESIONs), new Action<SESION>(this.detach_SESIONs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(25)")]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PHOTO", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PHOTO
		{
			get
			{
				return this._PHOTO;
			}
			set
			{
				if ((this._PHOTO != value))
				{
					this.OnPHOTOChanging(value);
					this.SendPropertyChanging();
					this._PHOTO = value;
					this.SendPropertyChanged("PHOTO");
					this.OnPHOTOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DESCRIPTION", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string DESCRIPTION
		{
			get
			{
				return this._DESCRIPTION;
			}
			set
			{
				if ((this._DESCRIPTION != value))
				{
					this.OnDESCRIPTIONChanging(value);
					this.SendPropertyChanging();
					this._DESCRIPTION = value;
					this.SendPropertyChanged("DESCRIPTION");
					this.OnDESCRIPTIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ORDERCOMISION", DbType="Int")]
		public System.Nullable<int> ORDERCOMISION
		{
			get
			{
				return this._ORDERCOMISION;
			}
			set
			{
				if ((this._ORDERCOMISION != value))
				{
					this.OnORDERCOMISIONChanging(value);
					this.SendPropertyChanging();
					this._ORDERCOMISION = value;
					this.SendPropertyChanged("ORDERCOMISION");
					this.OnORDERCOMISIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRICE", DbType="Float")]
		public System.Nullable<double> PRICE
		{
			get
			{
				return this._PRICE;
			}
			set
			{
				if ((this._PRICE != value))
				{
					this.OnPRICEChanging(value);
					this.SendPropertyChanging();
					this._PRICE = value;
					this.SendPropertyChanged("PRICE");
					this.OnPRICEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="COMISION_SESION", Storage="_SESIONs", ThisKey="ID", OtherKey="IDCOMISION")]
		public EntitySet<SESION> SESIONs
		{
			get
			{
				return this._SESIONs;
			}
			set
			{
				this._SESIONs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SESIONs(SESION entity)
		{
			this.SendPropertyChanging();
			entity.COMISION = this;
		}
		
		private void detach_SESIONs(SESION entity)
		{
			this.SendPropertyChanging();
			entity.COMISION = null;
		}
	}
}
#pragma warning restore 1591
